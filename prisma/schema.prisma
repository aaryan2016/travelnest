// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Property {
    id           String       @id @default(cuid())
    title        String
    description  String       @db.Text
    propertyType PropertyType
    address      String
    city         String
    country      String
    rooms        Room[]
    ameneties    Amenity[]
    images       String[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([title])
}

enum PropertyType {
    HOTEL
    APARTMENT
    RESORT
    VILLA
    GUESTHOUSE
}

model Room {
    id          String        @id @default(cuid())
    title       String
    description String
    properties  Property      @relation(fields: [propertyId], references: [id])
    propertyId  String
    price       Float
    capacity    Int // Number of guests
    quantity    Int // Number of rooms of this type
    images      String[]
    amenities   RoomAmenity[]
    bookings    Booking[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

// Amenities for Properties
model Amenity {
    id         String     @id @default(cuid())
    name       String     @unique
    icon       String? // Icon URL or name
    properties Property[]
    createdAt  DateTime   @default(now())
}

// Amenities for Rooms
model RoomAmenity {
    id        String   @id @default(cuid())
    name      String   @unique
    icon      String? // Icon URL or name
    rooms     Room[]
    createdAt DateTime @default(now())
}

model Booking {
    id            String        @id @default(cuid())
    bookedByUser  User          @relation(fields: [userId], references: [id])
    roomsBooked   Room[]
    checkInDate   DateTime
    checkOutDate  DateTime
    noOfGuests    Int
    totalPrice    Float
    bookingStatus BookingStatus
    paymrntStatus PaymentStatus
    userId        String
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

enum PaymentStatus {
    PENDING
    PAID
    REFUNDED
    FAILED
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    username      String
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String // Hashed Password
    role          UserRole   @default(GUEST)
    properties    Property[]
    // Booking       Booking?   @relation(fields: [bookingId], references: [id])
    // bookingId     String?
    Booking       Booking[]
}

enum UserRole {
    GUEST
    HOST
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
